plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'java'
}

group = 'com.outlook.furkan.dogan'
version = '2.0.1'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    // library
    implementation 'com.gmail.furkanaxx34:DBukkit:1.0.0'

    // spigot API
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'

    // PlaceholderAPI
    compileOnly 'me.clip:placeholderapi:2.11.1'

    // annotations
    annotationProcessor('org.jetbrains:annotations:23.0.0')
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        //noinspection GroovyAssignabilityCheck
        options.release = targetJavaVersion
    }
}

shadowJar {
    archiveFileName.set("${project.name}-${project.version}.jar")
    exclude 'META-INF/**'
    exclude '**/MANIFEST.MF'
    relocate 'co.aikar.commands', "com.outlook.furkan.dogan.dev.${project.name.toLowerCase(Locale.ENGLISH)}.acf"
    relocate 'co.aikar.locales', "com.outlook.furkan.dogan.dev.${project.name.toLowerCase(Locale.ENGLISH)}.locales"
    relocate 'org.json', "com.outlook.furkan.dogan.dev.${project.name.toLowerCase(Locale.ENGLISH)}.json"
    minimize() {
        exclude 'com.gmail.furkanaxx34:DBukkit:1.0.0'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
